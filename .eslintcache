[{"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\index.js":"1","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\serviceWorker.js":"2","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\App.js":"3","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\MainComponent.js":"4","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\HeaderComponent.js":"5","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\TopicsComponent.js":"6","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\MobilityComponent.js":"7","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\SmartCityComponent.js":"8","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\StatsComponent.js":"9","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\FooterComponent.js":"10","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\content\\SmartCityContentComponent.js":"11","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\ClimateSurveyComponent.js":"12","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\content\\EcarContentComponent.js":"13","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\ImprintComponent.js":"14","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\content\\PlugInHybridContentComponent.js":"15"},{"size":464,"mtime":1607714300284,"results":"16","hashOfConfig":"17"},{"size":5140,"mtime":1607714300286,"results":"18","hashOfConfig":"17"},{"size":3327,"mtime":1617727907271,"results":"19","hashOfConfig":"17"},{"size":5507,"mtime":1617436630287,"results":"20","hashOfConfig":"17"},{"size":2110,"mtime":1617436935112,"results":"21","hashOfConfig":"17"},{"size":2647,"mtime":1617436868864,"results":"22","hashOfConfig":"17"},{"size":4596,"mtime":1617436874439,"results":"23","hashOfConfig":"17"},{"size":2036,"mtime":1617437246478,"results":"24","hashOfConfig":"17"},{"size":10507,"mtime":1617436850285,"results":"25","hashOfConfig":"17"},{"size":895,"mtime":1617646675787,"results":"26","hashOfConfig":"17"},{"size":10946,"mtime":1617731976462,"results":"27","hashOfConfig":"17"},{"size":4223,"mtime":1617643128533,"results":"28","hashOfConfig":"17"},{"size":14125,"mtime":1617455969978,"results":"29","hashOfConfig":"17"},{"size":6322,"mtime":1617649065986,"results":"30","hashOfConfig":"17"},{"size":4601,"mtime":1617732592669,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"19aqoiw",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\index.js",[],["64","65"],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\serviceWorker.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\App.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\MainComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\HeaderComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\TopicsComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\MobilityComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\SmartCityComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\StatsComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\FooterComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\content\\SmartCityContentComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\ClimateSurveyComponent.js",["66","67"],"import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport * as Survey from 'survey-react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'survey-react/survey.css';\r\n\r\n\r\n    \r\nclass ClimateSurvey extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          surveyJSON : json, \r\n          questionsLoaded : null, \r\n          numQuestions : 0,\r\n          userScore : 0, \r\n          averageScore : null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.fillUpQuestions();\r\n    }\r\n\r\n    fillUpQuestions(){\r\n      var surveyQuestions = this.props.surveyData;\r\n      for(var i=0; i< surveyQuestions.length; i++){\r\n        var answers = [];\r\n\r\n        for(var a=1; a <= 6; a++){\r\n\r\n          var index = String('antwort_' + a);\r\n          var answer = surveyQuestions[i][index];\r\n          if(answer != null){\r\n            answers.push(answer);\r\n          }\r\n        }\r\n\r\n        this.state.surveyJSON.pages.push({\r\n          \r\n          questions: [\r\n            {\r\n              type: \"radiogroup\",\r\n              title: surveyQuestions[i]['frage'],\r\n              choicesOrder: \"random\",\r\n              choices: answers\r\n            }\r\n          ]\r\n        });\r\n      \r\n      }\r\n\r\n      this.setState({questionsLoaded : true});      \r\n    }\r\n\r\n    getModel(){\r\n      var model = new Survey.Model(this.state.surveyJSON);\r\n\r\n      model.onComplete.add( async (sender) => this.evaluateSurvey(sender));\r\n      return model;\r\n    }\r\n\r\n    async evaluateSurvey(sender){\r\n      var surveyAnswers = sender.data;\r\n      var surveyQuestions = this.props.surveyData;\r\n\r\n      for(var i=0; i < surveyQuestions.length; i++){\r\n        var indexAnswer = String('question'+(i+2));\r\n        var answer = surveyAnswers[indexAnswer];\r\n        var question = surveyQuestions[i]['frage'];\r\n        console.log(question + answer);\r\n\r\n          const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify([{ frage: question, antwort: answer  }])\r\n          };\r\n          await fetch('http://umweltprojektbe-env.eba-xvnpe4sr.eu-central-1.elasticbeanstalk.com/api/evaluateUmfrage', requestOptions)\r\n              .then(response => response.json())\r\n              .then(data => this.calculateFinalScore(data['userScore'])); \r\n          }\r\n\r\n          this.setState({averageScore: \"YOUR CLIMATE FOODPRINT IS: \" + this.state.userScore })\r\n          console.log(\"YOUR CLIMATE FOODPRINT IS:\"  + this.state.userScore);\r\n        \r\n    }\r\n\r\n    calculateFinalScore(score){\r\n      if(score !== undefined){\r\n        this.setState({\r\n          numQuestions: this.state.numQuestions += 1,\r\n          userScore: this.state.userScore += score\r\n        });\r\n\r\n        console.log(\"score \" + this.state.userScore / this.state.numQuestions); \r\n      }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.questionsLoaded == null){\r\n          return <p>Loading ...</p>\r\n        }\r\n\r\n        if(this.state.averageScore !== null){\r\n          return <p style={{margin: 200}}>{this.state.averageScore}</p>\r\n        }\r\n\r\n        return(\r\n            <section class=\"page-section\" id=\"stats\">\r\n                <div class=\"container\">\r\n                    <div class=\"text-center\">\r\n                        <h2 class=\"section-heading text-uppercase\">Umfrage</h2>\r\n                        <h3 class=\"section-subheading text-muted\">Wie umweltfreundlich bist du wirklich?</h3>\r\n                    </div>\r\n                    <Survey.Survey\r\n                        model={this.getModel()}\r\n                    />\r\n                    \r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst json = {\r\n    title: \"Green foodprint\",\r\n    showProgressBar: \"bottom\",\r\n    showTimerPanel: \"top\",\r\n    maxTimeToFinishPage: 120,\r\n    firstPageIsStarted: true,\r\n    startSurveyText: \"Start Quiz\",\r\n    pages: [\r\n      { questions: [ { type: \"html\", html: \"You are about to start quiz about your green foodprint. <br/>Please click on <b>'Start Quiz'</b> button when you are ready.\" } ] },\r\n    ],\r\n    completedHtml: `<h4>You are finished </h4>`\r\n  };\r\n  \r\n\r\nexport default ClimateSurvey;\r\n","C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\content\\EcarContentComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\ImprintComponent.js",[],"C:\\Users\\johan\\Documents\\GitHub\\smartcity-project\\src\\components\\content\\PlugInHybridContentComponent.js",["68","69","70","71","72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":91,"column":25,"nodeType":"79","endLine":91,"endColumn":35},{"ruleId":"77","severity":1,"message":"78","line":92,"column":22,"nodeType":"79","endLine":92,"endColumn":32},{"ruleId":"80","severity":1,"message":"81","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":15},{"ruleId":"80","severity":1,"message":"84","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":15},{"ruleId":"80","severity":1,"message":"85","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":20},{"ruleId":"80","severity":1,"message":"86","line":8,"column":8,"nodeType":"82","messageId":"83","endLine":8,"endColumn":13},{"ruleId":"80","severity":1,"message":"87","line":9,"column":8,"nodeType":"82","messageId":"83","endLine":9,"endColumn":16},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'CarStat' is defined but never used.","Identifier","unusedVar","'CarCity' is defined but never used.","'Energiewende' is defined but never used.","'Motor' is defined but never used.","'Batterie' is defined but never used.","no-global-assign","no-unsafe-negation"]